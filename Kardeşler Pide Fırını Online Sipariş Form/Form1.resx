<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAALQAAAGkAAAChAAAAzQAA
        AOoAAAD6AAAA+gAAAOoAAADNAAAAoQAAAGkAAAAsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAOQAAAJYAAADYAAAA+AAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+AAAANgAAACVAAAAOQAAAAYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAIgAAADmAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADmAAAAiAAA
        AB0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADkAAAC9AAAA+wAA
        AP8AAAD/AAAA/wAAAP8AAADsAAAAugAAAOgAAAD/AAAA/wAAAP8AAAD8AAAAxwAAAMEAAAD4AAAA/wAA
        AP8AAAD7AAAAvAAAADgAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGAAAA1QAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIsAAAAKAAAAfgAAAP8AAAD/AAAA/wAAANIAAAAnAAAAGwAA
        AL4AAAD/AAAA/wAAAP8AAAD/AAAA1QAAAEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQAA
        ANUAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD7AAAAUQAAAAAAAABCAAAA9wAAAP8AAAD/AAAAoAAA
        AAkAAAAAAAAAiQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA1AAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB4AAAC9AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAO4AAABAAAAAAAAAADMAAADoAAAA/wAA
        AP8AAACMAAAAAgAAAAAAAAB0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAvAAAAB4AAAAAAAAAAAAA
        AAAAAAAGAAAAiAAAAPwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6AAAADoAAAAAAAAALgAA
        AOEAAAD/AAAA/wAAAIMAAAAAAAAAAAAAAGwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD8AAAAiAAA
        AAYAAAAAAAAAAAAAADoAAADmAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADjAAAANQAA
        AAAAAAAqAAAA3AAAAP8AAAD/AAAAewAAAAAAAAAAAAAAZAAAAPsAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADlAAAAOQAAAAAAAAAEAAAAlgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOEAAAAyAAAAAAAAACgAAADYAAAA/wAAAP8AAAB9AAAAAAAAAAAAAABjAAAA+gAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAACVAAAABAAAAC4AAADYAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA5AAAADYAAAAAAAAAKwAAANwAAAD/AAAA/wAAAIoAAAACAAAAAAAAAGwAAAD+AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANcAAAAtAAAAaQAAAPkAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADqAAAAPAAAAAAAAAAwAAAA5AAAAP8AAAD/AAAAmwAAAAcAAAAAAAAAgQAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAAGgAAACiAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPUAAABHAAAAAAAAADoAAADxAAAA/wAAAP8AAACyAAAADwAA
        AAoAAACkAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAoAAAAM4AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAFYAAAAAAAAARwAAAPwAAAD/AAAA/wAA
        AM0AAAAYAAAAEAAAALcAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADNAAAA6wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAawAAAAAAAABbAAAA/gAA
        AP8AAAD/AAAA5gAAACMAAAAFAAAAlgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOoAAAD5AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAB8AAAAAAAA
        AG0AAAD/AAAA/wAAAP8AAADyAAAAOAAAAAAAAABBAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA+QAAAPkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3gAA
        AEcAAAAAAAAAPAAAANgAAAD/AAAA/wAAAPcAAABSAAAAAAAAAAUAAACQAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD5AAAA7AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ANEAAABCAAAAAgAAAAAAAAACAAAAOQAAAMgAAAD/AAAA+wAAAGwAAAAAAAAAAAAAAC4AAADaAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOsAAADOAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADxAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAOwAAAD/AAAAgwAAAAAAAAAAAAAAAwAA
        AJcAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAzQAAAKIAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAANUAAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAyQAAAP8AAACVAAAAAAAA
        AAAAAAAAAAAAZQAAAPgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAChAAAAagAAAPkAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAzQAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAC+AAAA/wAA
        AKIAAAAAAAAAAAAAAAAAAABTAAAA8wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAAGgAAAAvAAAA2AAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADOAAAACwAAADMAAABaAAAABQAAAEcAAABIAAAABgAA
        AL8AAAD/AAAAqQAAAAAAAAAAAAAAAAAAAF4AAAD2AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADXAAAALgAA
        AAQAAACXAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANAAAAAPAAAAbQAAAL4AAAANAAAAlgAA
        AJcAAAAOAAAAwAAAAP8AAACsAAAAAAAAAAAAAAAAAAAAcAAAAPoAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AJYAAAAEAAAAAAAAADsAAADmAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA0wAAABQAAABvAAAAvwAA
        AA4AAACXAAAAmAAAABEAAADCAAAA/wAAAK0AAAAAAAAAAAAAAAAAAACQAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADlAAAAOQAAAAAAAAAAAAAABgAAAIkAAAD8AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADVAAAAGAAA
        AG8AAAC/AAAADgAAAJcAAACYAAAAFAAAAMQAAAD/AAAArQAAAAAAAAAAAAAAEgAAALkAAAD/AAAA/wAA
        AP8AAAD/AAAA/AAAAIkAAAAHAAAAAAAAAAAAAAAAAAAAHwAAAL4AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ANgAAAAeAAAAbwAAAL8AAAAOAAAAlwAAAJgAAAAWAAAAxgAAAP8AAACtAAAAAAAAAAAAAAA7AAAA6QAA
        AP8AAAD/AAAA/wAAAP8AAAC9AAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOgAAANUAAAD/AAAA/wAA
        AP8AAAD/AAAA2wAAACUAAABuAAAAvwAAAA4AAACXAAAAmAAAABgAAADHAAAA/wAAAK0AAAAAAAAACQAA
        AJcAAAD/AAAA/wAAAP8AAAD/AAAA1gAAADoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARgAA
        ANYAAAD/AAAA/wAAAP8AAADjAAAAQAAAAHgAAAC/AAAADgAAAJYAAACZAAAAIwAAAMwAAAD/AAAArQAA
        ABMAAAB0AAAA7wAAAP8AAAD/AAAA/wAAANUAAABGAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAOgAAAL8AAAD7AAAA/wAAAPkAAADQAAAA2wAAAOoAAACxAAAA3QAAAN8AAAC+AAAA8QAA
        AP8AAADlAAAAwwAAAPQAAAD/AAAA/wAAAPsAAAC9AAAAOQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHwAAAIoAAADnAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADnAAAAiQAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAADsAAACXAAAA2QAAAPkAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPkAAADYAAAAlwAAADoAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAuAAAAagAA
        AKIAAADOAAAA6wAAAPoAAAD6AAAA6wAAAM4AAACiAAAAagAAAC4AAAAFAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/8AAAD/AAAA/gBAgHwAQIA4AEGAGABBgBAAQYAAAE
        CAAABAgAAAQAAAAEAAAABAAAAAQIAAAECAAABAwAAB8MAAAfDgAAHw4AAAAOAAAADgCAAA4BgAAMAcAA
        DAPgAAgH8AAAB/AAAA/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>